<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Demande" xml:space="preserve">
    <value>Abonnementanfrage ?</value>
  </data>
  <data name="DemandeIntercapi" xml:space="preserve">
    <value>Stellen Sie eine Anfrage Intercapi</value>
  </data>
  <data name="MDP" xml:space="preserve">
    <value>Passwort vergessen ?</value>
  </data>
  <data name="Problèmes" xml:space="preserve">
    <value>Zugangsprobleme ?</value>
  </data>
  <data name="Retour" xml:space="preserve">
    <value>Zurück nach oben</value>
  </data>
  <data name="Texte1" xml:space="preserve">
    <value>Die Grundbuchdaten sind jetzt online über das Informationssystem Intercapi verfügbar. Sie können von den Personen, die ein Zugangsrecht haben, konsultiert werden. Der Zugang steht derzeit Notaren, Landvermessern, Katastern und Verwaltungen offen. Wir arbeiten daran, diese auf Privatpersonen und andere Rechteinhaber im Sinne von Anhang 1 der kantonalen Grundverordnung zu erweitern.</value>
  </data>
  <data name="Texte2" xml:space="preserve">
    <value>Die oben genannten Nutzer haben Zugang zu den öffentlichen Daten des Grundbuchs. Zu diesen Daten gehören die Bezeichnung des Gebäudes, seine Beschreibung, der Name und die Bezeichnung des Eigentümers, die Form des Grundstücks und das Datum des Erwerbs (Artikel 26 (1) ORF, Artikel 970 (2) CC). ).</value>
  </data>
  <data name="Texte3Gras" xml:space="preserve">
    <value>Si vous ne disposez pas d’un accès à notre plateforme, ces informations ouvertes au public peuvent être obtenues auprès de nos bureaux de registres fonciers.</value>
  </data>
  <data name="Texte4" xml:space="preserve">
    <value>Wenn Sie keinen Zugang zu unserer Plattform haben, können Sie diese öffentlich zugänglichen Informationen bei unseren Grundbuchämtern anfordern.</value>
  </data>
  <data name="Texte5" xml:space="preserve">
    <value>Um einen öffentlichen oder erweiterten Zugang zu erhalten, muss ein gültiger Antrag gestellt werden, um eine Vereinbarung zwischen dem Nutzer und dem Kanton zu schließen. Danke, dass Sie das Formular an die nebenstehende Adresse zurücksenden.</value>
  </data>
  <data name="Titre" xml:space="preserve">
    <value>Online-Konsultation des Grundbuchs</value>
  </data>
</root>